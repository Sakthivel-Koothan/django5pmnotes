ex:
----
create a project,take the inputs from the user and perform the addition operation,to return the output on the webpage by using both get() and post()?

step1:
-----
to create a project

	django-admin startproject proj10

step2:
-----
goto project location and create an application in that project location.

	cd proj10

	python manage.py startapp app10

step3:
-----
to install our application in settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app10'
]

step4:
-----
to create a templates and to set the path for our templates in settings.py file of the project.

	settings.py
	------------
TEMPLATES = [
    {
       
        'DIRS': [os.path.join(BASE_DIR,'templates')],
     },
]

step5:
------
to create a views in views.py file of the application

	views.py
	--------
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def ginsert(request):
    return render(request,'ginput.html')
def pinsert(request):
    return render(request,'pinput.html')
def addition(request):
    if request.method=="GET":
        a=int(request.GET['fn'])
        b=int(request.GET['sn'])
        c=a+b
        return HttpResponse("<h1>The sum is:"+str(c)+"</h1>")
    else:
        a=int(request.POST['fn'])
        b=int(request.POST['sn'])
        c=a+b
        return HttpResponse("<h1>The sum is:"+str(c)+"</h1>")
        

	ginput.html
	------------
<!DOCTYPE html>
<html>
<body bgcolor="powderblue">
<form action="add" method="get">
Enter First Number:<input type="text" name="fn"><br><br>
Enter Second Number:<input type="text" name="sn"><br><br>
<input type="submit" value="ADD">
</form>
</body>
</html>


	pinput.html
	-----------
<!DOCTYPE html>
<html>
<body bgcolor="blue">
<form action="add" method="post">
{% csrf_token %}
Enter First Number:<input type="text" name="fn"><br><br>
Enter Second Number:<input type="text" name="sn"><br><br>
<input type="submit" value="ADD">
</form>
</body>
</html>

step6:
-----
to configure the url patterns for our views in urls.py file

	urls.py
	--------
from django.contrib import admin
from django.urls import path
from django.conf.urls import url
from app10 import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('gin/',views.ginsert),
    path('pin/',views.pinsert),
    url(r'add',views.addition)
]

step7:
-----
to apply the migrate

	python manage.py migrate

step8:
-------
to start the server

	python manage.py runserver

step9:
-----
to send the request

	http://127.0.0.1:8000/gin

	http://127.0.0.1:8000/pin

structure:
----------
	proj10
	   |--->app10
	   |	  |--->views.py
	   |--->proj10
	   |      |--->urls.py
           |      |--->settings.py
	   |--->templates
	   |      |-->ginput.html
	   |      |-->pinput.html
	   |--->manage.py



limitations in function based views:
------------------------------------
	we can use different HttpRequest methods in function based views by using conditional statements.

	the function based views don't supporting inheritance concept.


class based views:
------------------
	this is a another alternative way to implementing views.

	we can implement view by using class that type of views are called class based views.

	we can define every class as a view,our class is extending by View class of django.views.generic

	every HttpRequest method haveing seperate methods in View classs.

example:
--------
create classbased view to return the reponse as "hello world"?


step1:
-----
to create a project

	django-admin startproject proj11

step2:
------
go to project location and create an application in that project location.

	cd proj11

	python manage.py startapp app11

step3:
-----
to install our application in settings.py file of the project

	settings.py
	----------
INSTALLED_APPS = [
    
    'app11'
]

step4:
-------
to create a class based view in views.py file

	views.py
	--------
from django.shortcuts import render
from django.views.generic import View
from django.http import HttpResponse
# Create your views here.
class welcome(View):
    def get(self,request):
        return HttpResponse("<h1>Hello world</h1>")

step5:
-----
to configure the url patterns for views in urls.py file?

	urls.py
	--------
from django.contrib import admin
from django.urls import path
from app11.views import welcome
urlpatterns = [
    path('admin/', admin.site.urls),
    path('wel/',welcome.as_view())
]

step6:
------
to apply the migrate

	python manage.py migrate

step7:
-----
to start the server

	python manage.py runserver

step8:
------
to send the request

	http://127.0.0.1:8000/wel

structure:
----------
	proj11
	   |--->app11
	   |      |--->views.py
           |--->proj11
	   |      |--->settings.py
	   |      |--->urls.py
           |--->manage.py


