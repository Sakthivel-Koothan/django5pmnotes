		cookies and sessions
		---------------------
Cookies:
---------
	Http is a stateless protocol, when a request is send to the server it has no idea wheather you are requesting for the first time (or) you are the same person who has visited this page thousands times before.

	This is a problem, to overcome this problem we are introducing "cookie".

	A cookie was first implemented by a programmer named "Louis Mountulli" in the year of 1994.

What is Cookie:-
----------------
	A cookie is a small piece of data,which is stored in the users browser which is sent by the server.

	They are commonly used to store user preferrences.

How to working cookie
---------------------
	The browser sends the request to the server, the server process that request and sends the response along with one (or) more cookies to the browser.

	The browser saves the cookie received from the server.
	
	
How to create a cookie:
-----------------------
	We can create a cookie using the set_cookie( ) method of response object.

	Syntax:- set_cookie(name,value,max-age=None)

How to read the cookies:
------------------------
	Every request object in django has a cookie attribute which acts like a dictionary object.

	We can use cookie to access cookie value by using the following syntax,it will return string format.
 
	Syntax:- request.COOKIE['cookie_name']

	
How to delete a cookie:
------------------------
	To delete a cookie, simply call 'delete_cookie()' method of response object with the name of the cookie to delete.
	Syntax:
	     response.delete_cookie(cookiename)

Note:
-----	
	With the help of cookie we can solve the problem of statelessness of http.


Disadvantages (or) problems in cookies:
----------------------------------------
	Never use cookies to store sensitive data(means password).

	Cookies store data in plain text only.

	Most of the browsers don't allows cookies to store more than 4kb of data.

	Most of the browsers accept no more than 30 cookies for website.

ex:
----
step1:
-----
to create a project

	django-admin startproject proj26

step2:
-----
goto project location,in that location we are creating an application.

	cd proj26

	python manage.py startapp app26

step3:
-----
we can install our application into settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app26'
]

step4:
-----
to create a view in views.py file of the application

	views.py
	--------
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def set_cookie(request):
    html = HttpResponse("<h1>sivakrishna Django Tutorial</h1>")
    if request.COOKIES.get('visits'):
        html.set_cookie('sivakrishna', 'Welcome Back')
        value = int(request.COOKIES.get('visits'))
        html.set_cookie('visits', value + 1)
    else:
        value = 1
        text = "Welcome for the first time"
        html.set_cookie('visits', value)
        html.set_cookie('sivakrishna', text)
    return html

def show_cookie(request):
    if request.COOKIES.get('visits') is not None:
        value = request.COOKIES.get('visits')
        text = request.COOKIES.get('sivakrishna')
        html = HttpResponse("<center><h1>{0}<br>You have requested this page {1} times</h1></center>".format(text, value))
        html.set_cookie('visits', int(value) + 1)
        return html
    else:
        return redirect('/setcookie')

def delete_cookie(request):
    if request.COOKIES.get('visits'):
       response = HttpResponse("<h1>sivakrishna<br>Cookie deleted</h1>")
       response.delete_cookie("visits")
    else:
        response = HttpResponse("<h1>sivakrishna</h1>need to create cookie before deleting")
    return response

step5:
-----
	to configure the url patterns for our view in urls.py file.

	urls.py
	-------
from django.contrib import admin
from django.urls import path
from app26 import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('scookie/',views.set_cookie),
    path('gcookie/',views.show_cookie),
    path('dcookie/',views.delete_cookie)
]

step6:
------
to apply the migrate

	python manage.py migrate

step7:
-----
to start the server

	python manage.py runserver

step8:
-----
to send the request

	http://127.0.0.1:8000/scookie

	http://localhost:8000/gcookie

	http://localhost:8000.dcookie


Sessions:-
----------
	We are introducing the sessions to overcome the problems in cookies.

Problems in cookies:
--------------------
	1. An attacker can modify contents of a cookie.
	2. We cannot store sensitive data.
	3. We can store limited amount of data in cookie.

How to working with sessions:
------------------------------
	When we sessions the data is not stored directly in the browser instead of it is stored in the server.

	Django creates a unique random string called session id (or) SID and associates SID with the data.

	The server then sends a cookie name sesion id containing sid as value to the browser.

	Sid generated by django is a 32 characters long random string , so it is almost impossible to guess by an attacker.

Setting up sessions:
--------------------
	In django, we are implemented sessions using middleware.

Open settings.py file middleware option is available,

	django.contrib.session.middleware.SessionMiddleware


ex:
----
step1:
-----
to create a project

	django-admin startproject proj27

step2:
-----
goto project location,in that location we are creating an application.

	cd proj27

	python manage.py startapp app27

step3:
-----
we can install our application into settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app33'
]

step4:
-----
to create a view in views.py file of the application

	views.py
	--------
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def create_session(request):
    request.session['name'] = 'siva'
    request.session['password'] = 'krishna123'
    return HttpResponse("<h1>sivakrishna<br> the session is set</h1>")
def access_session(request):
    response = "<h1>Welcome to Sessions of sivakrishna</h1><br>"
    if request.session.get('name'):
        response += "Name : {0} <br>".format(request.session.get('name'))
    if request.session.get('password'):
        response += "Password : {0} <br>".format(request.session.get('password'))
        return HttpResponse(response)
    else:
        return redirect('create/')
def delete_session(request):
    try:
        del request.session['name']
        del request.session['password']
    except KeyError:
        pass
    return HttpResponse("<h1>sivakrishna<br>Session Data cleared</h1>")

step5:
-----
	to configure the url patterns for our view in urls.py file.

	urls.py
	-------
from django.contrib import admin
from django.urls import path
from app27 import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('ssession/',views.create_session),
    path('gsession/',views.access_session),
    path('dsession/',views.delete_session)
]

step6:
------
to apply the migrate

	python manage.py migrate

step7:
-----
to start the server

	python manage.py runserver

step8:
-----
to send the request

	http://127.0.0.1:8000/ssession

	http://localhost:8000/gsession

	http://localhost:8000.dsession


ex:
---
how to create hyper links in our webpages


step1:
-----
to create a project

	django-admin startproject proj28

step2:
-----
goto project location,in that project locationwe can create an application.

	cd proj28

	python manage.py startapp app28

step3:
-----
to install our application in settings.py file of the project

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app28'
]

step4:
-----
to create a templates and to set the path for our templates in settings.py file

	settings.py
	------------
TEMPLATES = [
    {
       
        'DIRS': [os.path.join(BASE_DIR,'templates')],
     },
]

step5:
-----
to create a static files and set the path for our static files in settings.py file

	settings.py
	-----------
STATIC_URL = '/static/'
STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static'),
    ]

step6:
------
to create a model in models.py file of the application

	models.py
	---------
from django.db import models

class teacher(models.Model):
    TeachersName=models.CharField(max_length=20)
    Age=models.IntegerField()
    Qualifiation=models.CharField(max_length=10)
    DOB=models.DateField()
    Gender=models.CharField(max_length=10)
    Address=models.CharField(max_length=50)
    PhoneNo=models.IntegerField()
    Emailid=models.EmailField(max_length=30,primary_key=True)

    class Meta:
        db_table="teacher"

step7:
-----
to check the errors in our model

	python manage.py check

step8:
------
to generate the sql query for our model class

	python manage.py makemigrations

step9:
------
to execute our sql query

	python manage.py migrate

step10:
-------
to create a django model forms in forms.py file of the application

	forms.py
	--------
from django import forms
from .models import teacher
class TeachersForm(forms.ModelForm):
    class Meta:
        model=teacher
        fields='__all__'


step11:
-------
to create a view in views.py file of the application
	
	views.py
	--------

from django.shortcuts import render
from .forms import TeachersForm
from django.http import HttpResponse
from .models import teacher

def home(request):
    return render(request,'school/home.html')
def teacher(request):
    if request.method=="POST":
        form=TeachersForm(request.POST)
        if form.is_valid():
            form.save()
            return HttpRespone("successfully")
    else:
        form=TeachersForm()
        return render(request,'school/teacher.html',{'form':form})


	school/home.html
	-----------------
<!DOCTYPE html>
{% load static %}
<html>
<head>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

<link rel="stylesheet" href="{% static 'css/styles.css' %}"/>
</head>
<body>
<center>
<h1 style="color:red"> School Mangement System</h1>
<nav style="font-size:30px" class="nav">
  <a  class="nav-link" active" href="teacher">Teachers</a>
  <a  class="nav-link" href="login">Classes</a>
</nav>
</center>
</body>
</html>

	school/teacher.html
	--------------------
<!DOCTYPE html>
<html>
{% load static %}
<head>
</head>
<body>
<center>
<h1>Teachers Details Form</h1>
<form action="" method="post">
{% csrf_token %}

<table cellspacing="10">
<tr>
<td>
{{form}}
</td>
</tr>
</table>
</form>
</center>
</body>
</html>

	css/styles.css
	---------------
body{
background-image:url("https://images.unsplash.com/photo-1580582932707-520aed937b7b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1189&q=80");
background-repeat:no-repeat;
background-size:cover;
}

step12:
------
to configure the url patterns for our views in urls.py file

	urls.py
	-------
from django.contrib import admin
from django.urls import path
from app28 import views

urlpatterns = [    
    path('admin/',admin.site.urls),
    path('wel/',views.home),
    path('wel/teacher/',views.teacher)
  ]

step13:
-------
to start the server

	python manage.py runserver

step14:
-------
to send the request

	http://127.0.0.1:8000/wel


