	Django Admin
	-------------

Admin sites are integral part of any website. 

Django provides an admin app.

We will create our own admin site called cadmin.

We are communicating the django admin site first we need to create a superuser

	we can create a superuser,by following command

	python manage.py createsuperuser


In django admin site,The Groups and Users under "Authentication and Autherization" are coming from django.contrib.auth.

Django uses
	Groups model to handle the permissions.
	The Users model refers to the users of the site.

Adding our models into Django admin site:
-----------------------------------------
By default ,django admin app does not load any model from the apps we are created.

To add a model to the django admin site we have to modify admin.py file available inside every app.

Note:
------
If admin.py file is not available inside the our application,just we can create a new file and called it as admin.py and then add our model into admin.py file.


ex:
----
step1:
------
to create a project

	django-admin startproject proj22

step2:
------
goto project location and create an application

	cd proj22

	python manage.py startapp app22

step3:
-----
to install our application into settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app22'
]

step4:
-----
to create a model in models.py file of the application

	models.py
	--------
from django.db import models

# Create your models here.
class customer(models.Model):
    cid=models.IntegerField(primary_key=True)
    cname=models.CharField(max_length=30)
    cadd=models.CharField(max_length=30)
    


step5:
------
after createing a model next we need to check errors in our model.

	python manage.py check

step6:
-----
to generate sql query for our model

	python manage.py makemigrations

step7:
-----
to execute the sql queries

	python manage.py migrate

step8:
------
to create a superuser for communicate django admin sit

	python manage.py createsuperuser

Username (leave blank to use 'dell'): siva
Email address: siva.python@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.

step9:
------
we can add/register our created model into django admin site

	admin.py
	--------
from django.contrib import admin
from .models import customer
# Register your models here.
admin.site.register(customer)


step10:
------
to start the server

	python manage.py runserver

step11:
------
to send the request

	http://127.0.0.1:8000/admin


How to customizing django admin site:
---------------------------------------
	To customize the appearance of models in Django Admin site, we can create a new class "Adminclass" which inherits from "admin.ModelAdmin" in admin.py file.

ModelAdmin Attributes:
-----------------------
1.list_display:- It contains which model fields to  display on the list page.

                 It accepts a list (or) tuple of fieldnames which you want to                  display.
	
2.search_fields:- This attributes enables the search function on the list page.

		  It accepts a list (or) tuple of fieldnames where you want to 		  search.

		  It performs a case- insensitive search.
	
3.ordering:-     It specifies how the list of objects should be ordered in the                  django admin site.

		 It accepts a list (or) tuple of fieldnames to specify the order.

	
4.list_filter:-  This attribute activate the filtering bar.

		 It accepts a list(or) tuple of field names.

		 Django provides automatically different shortcuts to filter the 			 objects based on the type of the field.


Ex:- Field type		Shortcuts of filter the objects
     -------------------------------------------------	
	   DateField		Today,
				Past 7 days,
				This month,
				This year

	BooleanField		All
				Yes
				No


5.date_hierarchy:- This attribute is specially designed to provide an intelligent 			   date based drill-down navigation just above Action select base.

	           It accepts a string format not a list( or) tuple.


customizable admin site
------------------------
	admin.py
	--------
from django.contrib import admin
from .models import customer
# Register your models here.
class customerAdmin(admin.ModelAdmin):
    list_display=["cid","cname","cadd"]
    search_fields=["cname","cadd"]
    ordering=["-cname"] # '-' symbol for descending order
    list_filter=["cadd"]
    
admin.site.register(customer,customerAdmin)


	working with static files?
	--------------------------
static files means css,javascript and images.

	we can working with static files,to configure the some settings in settings.py file of the project.

	settings.py
	-----------
after static url

STATICFILES_DIRS=[
	os.path.join(BASE_DIR,'static'),
    ]

how to loading the static files into templates?
----------------------------------------------
	we can load the css files into templates,by using following syntax,

	{% load static %}

<link rel="stylesheet" href="{% static 'cssfilename.css' %}">


	we can load the javascript files into templates,by using following syntax,

	{% load static %}

<script type="text/javascript" src="{% static 'javscriptfilename.js' %}>
</script>

	we can load the images into templates,by using following syntax,

	{% load static %}

<img src="{% static 'imagefilenamewithextension' %} />


example:
--------
step1:
------
to create a project

	django-admin startproject proj23

step2:
-----
goto project location and to create an application in that project location

	cd proj23

	python manage.py startapp app23

