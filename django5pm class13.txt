Templates:
---------
	a template is nothing but a html file which we can include python code by using some template languages.

	a template language is special language,the template languages are DTL,Jinja2,.....

	the templates are used to representing the presentation logics.

we can representing the template variables by using {{ }}

we can representing the template tags by using {% %}

example:
--------
create a Django project to print hello world on the webpage by using templates?

step1:
-----
to create a project

	django-admin startproject proj7

step2:
-----
goto project location and to create an application in our project.

	cd proj7

	python manage.py startapp app7

step3:
-----
to install our application into settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
    
    'app7'
]

step4:
-----
to create templates and to set the path for our templates under the template section in settings.py

	settings.py
	------------
TEMPLATES = [
    {
        
        'DIRS': [os.path.join(BASE_DIR,'templates')],
      },
]


step5:
------
to create a view in views.py file of the application

	views.py
	--------
from django.shortcuts import render

# Create your views here.
def welcome(request):
    return render(request,'hello.html')

note:
-------
	we can create a html files in templates

	hello.html
	----------
<!DOCTYPE html>
<html>
<body bgcolor="powderblue">
<h1 style="color:red">hello world</h1>
</body>
</html>

step6:
-----
to configure the url patterns for our views in urls.py file

	urls.py
	-------
from django.contrib import admin
from django.urls import path
from app7 import views
urlpatterns = [
    path('admin/', admin.site.urls),
    path('wel/',views.welcome)
]


step7:
------
to apply the migrate

	python manage.py migrate

step8:
-----
to start the server

	python manage.py runserver

step9:
-----
to send the request to the server

	http://127.0.0.1:8000/wel

structure:
-----------
	proj7
	   |--->app7
	   |      |--->views.py
	   |--->proj7
	   |      |--->settings.py
           |      |--->urls.py
           |--->templates
	   |      |--->hello.html
	   |--->manage.py


what is HTTP?
------------
	HTTP(Hyper Text Transfer Protocol) is a web protocol,which is used to enable the communication between client and server.

	we can make the request object by using HttpRequest class

	we can make the response object by using HttpResponse class.

the HttpRequest methods are,

	GET(),POST(),PUT(),DELETE(),MOVE(),.........

the most commonly used HttpRequest methods are GET() and  POST() in a web application.

differences between GET() and POST()?
------------------------------------

			GET()				
		--------------------
1).it is used to get the data from the server and we can post	
the small ammount of data to the server.

2).we can made the get request in 3-ways,they are	       
	by typeing url on the address bar,     
	by clicking on hyperlinks,
	by submitting the form

3).it is a default request

4).GET() method don't provide any security.

5).it is not suitable for sending the sensitive information

6).it is not suitable for uploading the files

7).in GET(),the requested url is append to the query string  

			POST()
		-----------------------
1).it is used to post the data to the server(small,medium,
large amount of data)

2).we can made the post req in one way,i.e by submitting the form.

3).we can made the post request manually(explicitly).  

4).POST() method provide security.
	    
5).it is suitable for sending the sensitive information

6).it is suitable for uploading the files

7).in POST() method,the requested url is not appended to the query string.
          
note:
------
whenever we are using GET(),one request object is created that is represented as dictionary object.

that dictionary object data will be loading into GET variable.

	if we want to get the values from GET request object by using hashing.

	request.GET['key']


whenever we are using POST(),one request object is created that is represented as dictionary object.

that dictionary object data will be loading into POST variable.

	if we want to get the values from POST request object by using hashing.

	request.POST['key']






	